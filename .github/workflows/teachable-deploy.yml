<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Fabric Classifier</title>
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"></script>
  <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f0f4f8;
      text-align: center;
      padding: 40px;
    }
    h1 {
      color: #2c3e50;
      font-size: 36px;
    }
    input[type="file"] {
      background-color: #2980b9;
      color: white;
      border: none;
      padding: 12px 20px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 16px;
      margin-top: 20px;
    }
    #prediction {
      margin-top: 30px;
      font-size: 22px;
      color: #34495e;
      font-weight: bold;
    }
    img {
      margin-top: 20px;
      max-width: 300px;
      border-radius: 10px;
    }
  </style>
</head>
<body>
  <h1>Fabric Classifier</h1>

  <input type="file" accept="image/*" onchange="handleImage(event)"><br>
  <img id="preview" src="#" alt="Image preview" style="display:none;">
  <div id="prediction"></div>

  <script>
    const URL = "https://teachablemachine.withgoogle.com/models/XXXXXXX/"; // ← غيّر الرابط هنا
    let model, maxPredictions;

    async function loadModel() {
      const modelURL = URL + "model.json";
      const metadataURL = URL + "metadata.json";
      model = await tmImage.load(modelURL, metadataURL);
      maxPredictions = model.getTotalClasses();
    }

    loadModel();

    async function handleImage(event) {
      const file = event.target.files[0];
      if (!file) return;

      const reader = new FileReader();
      reader.onload = async function(e) {
        const img = document.getElementById("preview");
        img.src = e.target.result;
        img.style.display = "block";

        const imageElement = new Image();
        imageElement.src = e.target.result;

        imageElement.onload = async function() {
          const prediction = await model.predict(imageElement);
          prediction.sort((a, b) => b.probability - a.probability);
          const top = prediction[0];

          document.getElementById("prediction").innerHTML =
            `النوع المتوقع: <strong>${top.className}</strong><br>النسبة: ${(top.probability * 100).toFixed(2)}%<br><br>` +
            (top.probability >= 0.75
              ? `💡 يبدو بثقة أنه من نوع <strong>${top.className}</strong>`
              : `⚠️ غير متأكد، ربما يكون <strong>${top.className}</strong>`);
        };
      };
      reader.readAsDataURL(file);
    }
  </script>
</body>
</html>
